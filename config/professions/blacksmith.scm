(define (standard-production agent use input output)
    (let ((use-commodity (car use))
          (use-quantity (cadr use))
          (input-commodity (car input))
          (input-quantity (cadr input))
          (output-commodity (cadr output))
          (output-quantity (cadr output))
          (min-output (caddr output))
          (available-use (get-quantity agent use-commodity))
          (available-input (get-quantity agent input-commodity))
          (has-use? (>= available-use 1))
          (has-input? (>= available-input 1))
          (need-output? (< output-quantity min-output))
          (begin
            (consume agent use-commodity use-quantity)
            (if (and has-use? has-input? need-output?)
                (begin
                    (consume agent input-commodity (if (eq? input-quantity 'all) available-input input-quanitty)
                    (produce agent output-commodity (if (eq? output-quantity 'all) available-input output-quanitty))))
            )
          )
        )
    )
)

(define (blacksmith-production agent)
    (standard-production agent (list 'food 1) (list 'metal 'all) (list 'tools 'all 4)))
